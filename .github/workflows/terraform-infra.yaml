name: Terraform Infra Deploy/Destroy

on:
  workflow_dispatch:
    inputs:
      action:
        description: "Terraform action: apply or destroy"
        required: true
        default: "apply"
        type: choice
        options:
          - apply
          - destroy

jobs:
  terraform:
    runs-on: ubuntu-latest

    env:
      TF_LOG: INFO
      AWS_DEFAULT_REGION: ap-northeast-2

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform plan

      - name: Terraform Apply or Destroy
        run: |
          if [ "${{ github.event.inputs.action }}" == "apply" ]; then
            terraform apply -auto-approve
          elif [ "${{ github.event.inputs.action }}" == "destroy" ]; then
            terraform destroy -auto-approve
          else
            echo "Invalid action input. Use apply or destroy."
            exit 1
          fi

      - name: Get Terraform Outputs
        if: ${{ github.event.inputs.action == 'apply' }}
        run: |
          echo "EKS_CLUSTER_NAME=$(terraform output -raw eks_cluster_name)" >> $GITHUB_ENV
          echo "NODE_ROLE_ARN=$(terraform output -raw node_role_arn)" >> $GITHUB_ENV

      - name: Wait for EKS Cluster to be ACTIVE
        if: ${{ github.event.inputs.action == 'apply' }}
        run: |
          for i in {1..30}; do
            STATUS=$(aws eks describe-cluster \
              --region ap-northeast-2 \
              --name ${{ env.EKS_CLUSTER_NAME }} \
              --query "cluster.status" --output text)

            echo "EKS status: $STATUS"
            if [ "$STATUS" = "ACTIVE" ]; then
              break
            fi
            echo "Waiting for EKS to become ACTIVE..."
            sleep 10
          done

      - name: Install kubectl
        if: ${{ github.event.inputs.action == 'apply' }}
        uses: azure/setup-kubectl@v3
        with:
          version: "v1.28.0"

      - name: Configure kubectl for EKS
        if: ${{ github.event.inputs.action == 'apply' }}
        run: |
          aws eks update-kubeconfig \
            --region ap-northeast-2 \
            --name ${{ env.EKS_CLUSTER_NAME }}

      - name: Apply aws-auth ConfigMap dynamically
        if: ${{ github.event.inputs.action == 'apply' }}
        run: |
          cat <<EOF > aws-auth.yaml
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: aws-auth
            namespace: kube-system
          data:
            mapRoles: |
              - rolearn: ${{ env.NODE_ROLE_ARN }}
                username: system:node:{{EC2PrivateDNSName}}
                groups:
                  - system:bootstrappers
                  - system:nodes
          EOF

          kubectl apply -f aws-auth.yaml
